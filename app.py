# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QuuyhiAZ2Ejtvg0NHB56chJvxmNescNR
"""

import streamlit as st
from pyspark.ml.regression import LinearRegressionModel, RandomForestRegressionModel
from pyspark.sql import SparkSession
from pyspark.ml.feature import VectorAssembler

# Initialize Spark session
spark = SparkSession.builder.master("local").appName("EV Price Prediction").getOrCreate()

# Load pre-trained models
lr_model = LinearRegressionModel.load("linear_regression_ev_model")
rf_model = RandomForestRegressionModel.load("random_forest_ev_model")

# Streamlit UI
st.title("EV Price Prediction")

# Input fields
battery_capacity = st.number_input("Battery Capacity (kWh)", min_value=0)
range_miles = st.number_input("Range (miles)", min_value=0)
weight_kg = st.number_input("Weight (kg)", min_value=0)
seats = st.number_input("Seats", min_value=0)

# Make prediction
if st.button("Predict Price"):
    features = [battery_capacity, range_miles, weight_kg, seats]
    assembler = VectorAssembler(inputCols=["Battery_Capacity_kWh", "Range_miles", "Weight_kg", "Seats"], outputCol="features")
    input_data = spark.createDataFrame([(battery_capacity, range_miles, weight_kg, seats)], ["Battery_Capacity_kWh", "Range_miles", "Weight_kg", "Seats"])
    assembled_data = assembler.transform(input_data)

    # Predictions
    lr_prediction = lr_model.transform(assembled_data).head().prediction
    rf_prediction = rf_model.transform(assembled_data).head().prediction

    st.write(f"Linear Regression Model Predicted Price: ${lr_prediction:.2f}")
    st.write(f"Random Forest Model Predicted Price: ${rf_prediction:.2f}")

# Stop the Spark session
spark.stop()

